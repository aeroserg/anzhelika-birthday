import { useEffect, useState } from "react";
import { Fa2, Fa4, FaClock, FaCakeCandles } from "react-icons/fa6";
import { store } from "../storage/store";
import { FaArrowDown, FaPlane } from "react-icons/fa";
export default function TimeProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const [isNowBD, setIsNowBD] = useState<0 | 1 | 2>(0);
  const [daysLeft, setDaysLeft] = useState<number>(0);
  const [hoursLeft, setHoursLeft] = useState<number>(0);
  const [minutesLeft, setMinutesLeft] = useState<number>(0);
  const [secondsLeft, setSecondsLeft] = useState<number>(0);
  const [randomImage, setRandomImage] = useState<number>(
    Math.floor(Math.random() * 28) + 1
  );

  const [wordForm, setWordForm] = useState<"день" | "дня" | "дней">("день");

  function setTime(targetDate: Date) {
    setDaysLeft(
      Math.floor((targetDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24))
    );
    setHoursLeft(
      Math.floor((targetDate.getTime() - Date.now()) / (1000 * 60 * 60)) % 24
    );
    setMinutesLeft(
      Math.floor((targetDate.getTime() - Date.now()) / 1000 / 60) % 60
    );
    setSecondsLeft(Math.floor((targetDate.getTime() - Date.now()) / 1000) % 60);
  }

  useEffect(() => {
    const targetDateStart = new Date(`${store.targetDate} 00:00:00`);
    const targetDateEnd = new Date(`${store.targetDate} 23:59:59`);

    if (
      Date.now() > targetDateStart.getTime() &&
      Date.now() < targetDateEnd.getTime()
    ) {
      setIsNowBD(1);
    } else if (Date.now() < targetDateStart.getTime()) {
      setIsNowBD(0);
    } else if (Date.now() > targetDateEnd.getTime()) {
      setIsNowBD(2);
    }
    setRandomImage(Math.floor(Math.random() * 28) + 1);
    setTime(targetDateStart);
    if (daysLeft === 1) {
      setWordForm("день");
    } else if (daysLeft.toString().slice(-2).slice(0, 1) === "1") {
      setWordForm("дней");
    } else if (
      daysLeft.toString().length > 1 &&
      daysLeft.toString().slice(-1) === "1"
    ) {
      setWordForm("день");
    } else if ([2, 3, 4].includes(Number(daysLeft.toString().slice(-1)))) {
      setWordForm("дня");
    } else {
      setWordForm("дней");
    }
    setInterval(() => {
      setTime(targetDateStart);
    }, 1000);
  }, [minutesLeft, daysLeft]);

  let whatRender: React.ReactNode;
  switch (isNowBD) {
    case 0:
      whatRender = (
        <div className="action-card">
          <h2
            style={{
              marginTop: "1rem",
              fontSize: "1.5rem",
              textAlign: "center",
            }}
          >
            Уже через {""}
            <b>
              {daysLeft ? `${daysLeft} ${wordForm}` : ""}{" "}
              {hoursLeft ? `${hoursLeft}ч.` : ""}{" "}
              {minutesLeft ? `${minutesLeft}м.` : ""}{" "}
              {!daysLeft && !hoursLeft && secondsLeft
                ? `${secondsLeft}сек.`
                : ""}
            </b>{" "}
            <FaClock size={34} />
            ...
          </h2>
          <div
            style={{
              marginTop: "1rem",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            <div style={{ marginBottom: "0.5rem" }}>
              <FaCakeCandles size={40} /> <Fa2 size={40} />
              <Fa4 size={40} />
            </div>
            <img
              src={`random/${randomImage}.jpg`}
              width={300}
              style={{ marginTop: "1rem", width: "100%" }}
            />
            <div style={{ marginTop: "1rem" }}>
              <p style={{ marginBottom: "1rem" }}>Подсказка:</p>
              <FaPlane size={40} /> {/*<FaGlobeEurope size={40} />{" "} */}
             <svg stroke="currentColor" fill="currentColor" strokeWidth="0" viewBox="0 -10 260 260" height="45" width="50" xmlns="http://www.w3.org/2000/svg">
                <metadata>
                  {" "}
                  Россия и Ближний Восток
                </metadata>
                <g>
                  <g>
                    <g>
                      <path
                        fill="#000000"
                        d="M116.8,10.4c-29.5,3-56.1,16.4-76,38.1C12.1,79.8,2.6,124.5,16,164.9c5.9,17.9,14.9,32.5,28.3,46.1c9.8,9.9,19.1,16.6,31.9,22.9c11.8,5.8,23.5,9.4,37.4,11.4c6.4,0.9,23.2,0.8,30.5-0.3c20-2.8,39.1-10.7,55.5-22.9c2.5-1.9,7.8-6.7,11.9-10.8c10.6-10.6,16.8-19.1,22.8-31.8c5.5-11.4,8.8-21.9,10.7-34.2c1.3-8.6,1.4-24.9,0.2-33.2c-3.9-26.5-15.4-49.5-33.8-67.7c-10-9.9-18.9-16.2-31.3-22.3c-11.6-5.7-22.4-9-35.3-11C138.9,10.2,122.6,9.7,116.8,10.4z M142.6,37.9c7.9,1.2,20.1,4.9,20.1,6.1c0,0.2-0.8,0.7-1.8,1.1c-1,0.4-1.8,1-1.8,1.3c0,0.8-1.5,2.6-2.2,2.6c-0.6,0-1.8,1.4-2,2.4c-0.1,0.6-0.3,0.7-1.2,0.2l-1.1-0.6l1-1.2c0.5-0.6,0.9-1.3,0.9-1.4c0-0.1-1.5-0.7-3.3-1.2c-1.8-0.6-3.8-1.3-4.4-1.7c-2.3-1.5-6,0.6-9.2,5.2c-1.6,2.2-2.8,3.4-4.4,4.2c-1.2,0.6-2.4,1.5-2.7,2c-0.6,1.2-0.1,6.1,0.7,6.4c0.3,0.1,1.6-0.2,2.8-0.7c2.7-1.2,2.7-1.2,3.4,0.4c0.4,0.9,0.9,1.4,1.6,1.4c1.9,0,2.5-1,2.7-4.4c0.3-4.2,2.2-8,3.9-8c0.5,0,0.5,0.2-0.1,1.4c-0.9,1.8-0.9,3.4,0.2,4.3c0.7,0.6,1.4,0.7,3.6,0.5c1.9-0.2,2.6-0.1,2.3,0.2c-0.2,0.3-1.1,0.6-1.8,0.6c-1.2,0.1-1.4,0.3-1.4,1.5c0,1.1-0.2,1.4-1,1.5c-0.8,0.1-1.1,0.5-1.2,1.8c-0.1,1.8-0.5,2.1-4,2.9c-1.7,0.4-2.6,0.4-3,0c-0.3-0.2-1-0.4-1.6-0.2c-1.3,0.4-3-0.6-2.7-1.5c0.1-0.4,0-0.6-0.4-0.6c-0.4,0-0.6,0.3-0.4,0.9c0.3,1.2-0.6,2.3-2,2.3c-0.6,0-2.9,1.3-5,2.9c-2.4,1.7-4.3,2.9-4.9,2.8c-0.5-0.1-0.9,0.1-0.9,0.3c0,0.3-0.6,0.5-1.3,0.5c-1.9,0-2.1,0.4-0.6,1.8c0.8,0.7,1.4,1.5,1.4,1.8c0,0.3-1.5,1.2-3.4,2.1c-3.4,1.6-3.5,1.7-5.4,1c-2.9-1-3.2-0.6-3.2,4.8c0,5.2,0.2,6,1.4,6c0.6,0,1.1,0.5,1.3,1.2c0.4,1,0.6,1.1,1.2,0.6c0.4-0.3,1.5-0.6,2.5-0.6c1,0,2.1-0.3,2.4-0.6c0.3-0.4,0.9-0.6,1.4-0.6c0.6,0,0.9-0.5,1.1-1.5c0.2-1.2,0.9-1.9,3-3.4c1.5-1,2.8-2.1,2.8-2.4c0-1.2,1.8-2.3,4.2-2.6c1.4-0.1,2.9-0.4,3.3-0.5c0.5-0.1,1.9,0.7,3.9,2.6c1.7,1.6,3.8,3.5,4.7,4.2c1.2,1,1.4,1.6,1.2,2.4c-0.4,1.3-0.3,1.2-2.3,1.4c-1,0.1-1.9,0.2-2,0.2c-0.2,0,3.1,1.9,3.5,1.9c0.1,0,0.2-0.4,0.2-0.8s0.4-1.2,0.9-1.6c0.5-0.4,0.9-1.1,0.9-1.5c0-1.2-1.9-4.8-2.7-5c-0.9-0.3-4-4.8-3.6-5.2c0.7-0.7,4.1,1.7,7.8,5.5c3,3.1,4.2,4.1,5.3,4.2c1.2,0.1,1.3,0,1.2-1.1c0-0.8,0.2-1.3,1-1.8c1.2-0.6,3.7-0.3,3.3,0.5c-0.1,0.2,0,0.9,0.3,1.5c0.3,0.6,0.7,1.4,0.9,1.8c0.2,0.4,1.2,1.3,2.1,2c1.7,1.2,2.2,1.3,6.1,1.3c4.1,0.1,4.3,0.1,4.7,1.2c0.7,1.9,0.5,4.5-0.5,5.4c-0.7,0.7-1.9,0.8-7.7,0.9s-7-0.1-8-0.8c-0.6-0.4-1.5-0.8-2-0.8c-1.2,0-2.6,1.3-2.6,2.6c0,2-2,2-6.5-0.2c-1.4-0.7-3.8-1.8-5.4-2.3c-1.6-0.6-2.9-1.2-2.9-1.3s0.3-0.6,0.7-1.1c0.6-0.7,0.6-1.1,0.1-2.4c-0.6-1.7-0.6-1.7-3.4-1.7c-4.2,0-12.7,0.9-14.7,1.6c-1.1,0.4-2.8,0.5-4.2,0.4c-2.4-0.2-2.5-0.2-5.2,1.9c-2.7,2.1-3.3,2.9-4.1,5.6c-0.5,1.5-3.3,3.5-5,3.5c-1.2,0-3.5,2.4-6.6,6.7l-2.4,3.3l0.3,2.8c0.2,2.2,0,3.7-0.8,7c-1,3.7-1,4.4-0.5,6.1c0.4,1.1,1.1,3.8,1.8,6.1c1.2,4.5,1.9,5.4,7.6,9.6c2.3,1.8,3.1,2,8.4,3l5.9,1.1l3.6-1.4c1.9-0.8,4-1.6,4.6-1.8c1.5-0.4,2.9,0.5,3.7,2.4l0.6,1.7l2.7-0.3c2.1-0.2,2.9,0,3.8,0.6c1,0.7,1.1,1.2,1,3.4c0,1.4-0.4,3.2-0.8,4c-0.7,1.3-0.7,1.6,0,2.5c0.4,0.6,1.4,1.5,2.3,2.1c1.8,1.2,3.7,4.4,4.4,7.5c0.3,1.3,0.7,2.9,1,3.6c0.4,1.1,0.3,1.4-0.5,2.3c-0.6,0.6-1.5,2.4-2.2,4.2l-1.2,3.1l1.5,1.8c3.6,4.1,4.5,5.7,4.2,7.6c-0.2,1.6,0,2.1,1.9,5c1.2,1.8,2.3,3.7,2.3,4.3c0.1,1.8,2.9,2.6,5.6,1.7c0.7-0.2,2.7-0.6,4.4-0.9c2.2-0.3,3.7-0.9,5.5-2c3.7-2.4,6.7-5.3,7.3-6.9c0.3-1,1.3-2,2.8-3c1.2-0.8,2.3-1.8,2.3-2.2c0-0.4,0.4-1.8,0.9-3.1c0.8-2.2,1.3-2.8,4.8-5.3c3.4-2.5,4-3.1,4.4-4.8c0.6-2.2,0.2-8.5-0.7-12c-0.5-2-0.5-2.4,0.5-4c1.5-2.7,3.6-5.6,7.9-11.4c2.1-2.8,4.2-6,4.6-6.9c1.2-2.6,3-9.5,2.7-10c-0.1-0.2-1-0.7-1.9-1.2c-1.6-0.8-1.8-0.8-4.4,0c-3.3,1-3.9,0.9-4.5-1c-0.3-0.9-1.6-2.2-3.7-3.7c-3.6-2.6-5.8-5.4-6.2-7.8c-0.2-0.9-2.4-4.7-5.1-8.8c-2.6-4-4.2-6.6-3.6-5.9c0.6,0.7,1.4,1.2,1.6,1c0.3-0.2,0.4-0.5,0.2-0.7c-0.2-0.2-0.1-0.4,0.1-0.4c0.2,0,1.2,1.2,2.2,2.6c1,1.5,2.6,3.4,3.6,4.3c0.9,0.9,2.2,2.8,2.8,4.2c0.7,1.7,1.8,3.1,3.2,4.3c1.2,0.9,2.8,2.9,3.6,4.4c0.8,1.4,1.8,3.1,2.2,3.7c0.8,1.1,0.9,1.1,2.4,0.4c0.9-0.4,2.2-1.2,3-1.8c0.8-0.6,2.9-1.6,4.8-2.2c4.9-1.5,5.3-1.9,5.1-7.1c-0.1-2.4,0-5.7,0.2-7.6l0.4-3.3l-1.3-0.3c-0.7-0.1-1.8-0.5-2.6-0.6c-1-0.4-1.5-0.2-2.5,0.6c-2.4,2-2.8,1.9-5.3-0.7c-1.2-1.3-2.2-2.7-2.1-3.1c0.2-1.1,3.9-1.3,4.9-0.3c0.7,0.6,1.2,0.6,5.2-0.4c2.4-0.6,6.2-1.4,8.5-1.7c3.6-0.5,4.5-0.5,6.2,0.1l2.1,0.7v2.3c0,1.2,0.2,2.6,0.5,3c0.3,0.4,0.5,3,0.5,5.8c0,2.8,0.2,8.1,0.4,11.8c1.3,24.4-7.8,49-24.9,66.9c-10.8,11.3-22.9,19.1-37.1,23.8c-28.2,9.4-58.1,4.9-82.4-12.3c-4.8-3.5-15.9-13.8-15.9-15c0-0.3,0.7-1.7,1.5-2.9c1.2-1.8,1.7-2.3,2.6-2.2l1.2,0.1v-6.7v-6.7l1.8-3.1c0.9-1.7,1.7-3.4,1.7-3.8c0-1.5-4.3-6.9-10.2-12.8c-3.2-3.2-6.1-6.3-6.4-6.8c-0.2-0.5-0.5-1.6-0.5-2.4c0-1.8-2.4-6.4-5.4-10.2c-2.3-3-4.8-9.5-4.8-12.4c0-1.2-0.3-1.9-1.2-2.7c-1.5-1.3-1.5-2.1,0.4-9.4c4-15.6,12.5-30.5,23.1-40.9c2.1-2.1,2.8-2.5,4.1-2.4c1.4,0,1.7-0.1,2.4-1.7c0.5-1.1,1.1-1.7,1.4-1.6c0.8,0.3,1.3-1.2,0.6-1.7c-0.4-0.3-0.3-0.5,0.5-0.7c0.7-0.2,1.3,0,2.1,0.7c0.7,0.7,1.4,0.9,2.3,0.7c0.6-0.2,1.8-0.4,2.4-0.5C79.4,57,80,56.3,81,54c0.7-1.6,2.1-3.6,3-4.4c0.9-0.9,1.7-1.8,1.7-2.2c0-1.1,15-7,19.7-7.8l1.8-0.3l-1.2,0.9c-0.6,0.5-2.2,1.2-3.5,1.7c-2.4,0.7-4.8,2.2-4.8,3c0,0.2-0.6,1-1.4,1.7c-1.1,1-1.5,1.8-1.6,3.2l-0.2,2l1.3-0.9c3-2.1,7.5-4.2,9.1-4.2c0.9,0,2.3-0.3,3.1-0.7c1-0.5,2-0.6,3.1-0.5c3.6,0.6,12-2.8,17.3-6.9l2.7-2.1l3.5,0.3C136.4,37.1,140.1,37.5,142.6,37.9z"
                      />
                      <path
                        fill="#000000"
                        d="M119.7,61.2c-0.9,1.2-1.2,2.9-0.3,2.4c0.3-0.2,0.5,0,0.3,0.3c-0.1,0.4,0,1,0.4,1.4c0.6,0.7,0.6,0.8-0.2,1.3c-0.5,0.3-0.8,0.9-0.7,1.2c0.1,0.4-0.1,0.6-0.6,0.6c-0.6,0-0.5,0.2,0.5,0.6c1.2,0.6,1.2,0.6,0.4,0.7c-0.6,0-1.2,0.3-1.6,0.7c-0.5,0.6-0.4,0.6,0.6,0.4c0.6-0.1,2.1-0.3,3.4-0.3c2,0,2.4-0.1,2.9-1.2c0.5-1,0.5-1.2-0.3-1.4c-0.5-0.1-0.9-0.6-0.9-1s-0.2-1-0.5-1.3c-0.3-0.3-0.6-1.4-0.6-2.4c0-1.1-0.2-1.9-0.4-1.9c-0.3,0-0.4-0.3-0.2-0.7C122.2,59.8,120.6,60,119.7,61.2z"
                      />
                      <path
                        fill="#000000"
                        d="M115.6,64.9c-1.3,1.2-2.6,3.4-2.2,3.8c0.5,0.6,3.6-0.9,3.8-1.8c0.2-0.6,0.5-1.1,0.8-1.3c0.3-0.2,0.3-0.6-0.1-1C117.2,63.7,117,63.7,115.6,64.9z"
                      />
                    </g>
                  </g>
                </g>
              </svg>
              <FaArrowDown size={40} />
            </div>
          </div>
        </div>
      );
      break;
    case 1:
      whatRender = children;
      break;
    case 2:
      whatRender = children;
      break;
  }

  return <div>{whatRender}</div>;
}
